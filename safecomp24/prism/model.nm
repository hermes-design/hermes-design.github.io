csg
//IEA AIE 2024
//author: Abdelhakim Baouya

player p1  GeneratedDecisiontree endplayer  //Human decision 
player p2  PDT endplayer //PDT


const int UP =1;
const int DOWN =-1;
const double PH;
const double TM;
const double WL;


const double cost; //The cost of winning

const int type; //Attacks type

const k; // number of rounds

// module to count the rounds
module rounds

	rounds : [0..k+1];
	
	[] rounds<=k -> (rounds'=rounds+1);
	[] rounds=k+1 -> true;

endmodule

module GeneratedDecisiontree
PP : [-1..1] init 0 ;
[rule1] PH<=2.5 & PH<=1.5 -> 1.0:(PP'=UP) ;
[rule2] PH<=2.5 & PH>1.5 & WL<=2.5 -> 1.0:(PP'=UP) ;
[rule3] PH<=2.5 & PH>1.5 & WL>2.5 & TM<=1.5 -> 0.2:(PP'=DOWN)  + 0.8:(PP'=UP) ;
[rule4] PH<=2.5 & PH>1.5 & WL>2.5 & TM>1.5 & TM<=2.5 -> 0.6666666666666666:(PP'=DOWN)  + 0.3333333333333333:(PP'=UP) ;
[rule5] PH<=2.5 & PH>1.5 & WL>2.5 & TM>1.5 & TM>2.5 -> 0.4:(PP'=DOWN)  + 0.6:(PP'=UP) ;
[rule6] PH>2.5 -> 1.0:(PP'=DOWN) ;
endmodule



//PDT Model 
module PDT
	success : [-1..1] init -1 ;
	//done : [0..1] init 1 ;
	[att_rule1] type=1 -> 0.49854227405247814:(success'=0)   + 0.5014577259475219:(success'=1)  ;
	[att_rule2] type=2 -> 0.49117647058823527:(success'=0)   + 0.5088235294117647:(success'=1)  ;
	[att_rule3] type=3 -> 0.4921135646687697:(success'=0)  + 0.5078864353312302:(success'=1)  ;
endmodule



//register
module RegisterCertainty //Almost Certainly Not

        win : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[att_rule1, rule1]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
	[att_rule1, rule2]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
	[att_rule1, rule3]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
        [att_rule1, rule4]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
	[att_rule1, rule5]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
        [att_rule1, rule6]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 

	[att_rule2, rule1]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
	[att_rule2, rule2]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ;
	[att_rule2, rule3]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ;
        [att_rule2, rule4]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ;
	[att_rule2, rule5]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ;
        [att_rule2, rule6]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 

	[att_rule3, rule1]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
	[att_rule3, rule2]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
	[att_rule3, rule3]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
        [att_rule3, rule4]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
	[att_rule3, rule5]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
        [att_rule3, rule6]   true -> 0.93:(win'=1)+ 0.07:(win'=0) ; 
endmodule

module RegisterProbablyNot //Probably Not
        winProbablyNot : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[att_rule1, rule1]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
	[att_rule1, rule2]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
	[att_rule1, rule3]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
        [att_rule1, rule4]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
	[att_rule1, rule5]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
        [att_rule1, rule6]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 

	[att_rule2, rule1]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
	[att_rule2, rule2]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
	[att_rule2, rule3]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
        [att_rule2, rule4]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
	[att_rule2, rule5]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
        [att_rule2, rule6]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 

	[att_rule3, rule1]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
	[att_rule3, rule2]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
	[att_rule3, rule3]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
        [att_rule3, rule4]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
	[att_rule3, rule5]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
        [att_rule3, rule6]   true -> 0.7:(winProbablyNot'=1)+ 0.3:(winProbablyNot'=0) ; 
endmodule

module RegisterChancesAboutEven //Chances About Even
        winChancesAboutEven : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[att_rule1, rule1]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
	[att_rule1, rule2]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
	[att_rule1, rule3]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
        [att_rule1, rule4]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
	[att_rule1, rule5]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
        [att_rule1, rule6]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 

	[att_rule2, rule1]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
	[att_rule2, rule2]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
	[att_rule2, rule3]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
        [att_rule2, rule4]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
	[att_rule2, rule5]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
        [att_rule2, rule6]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 

	[att_rule3, rule1]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
	[att_rule3, rule2]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
	[att_rule3, rule3]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
        [att_rule3, rule4]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ;  
	[att_rule3, rule5]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
        [att_rule3, rule6]   true -> 0.5:(winChancesAboutEven'=1)+ 0.5:(winChancesAboutEven'=0) ; 
endmodule


module RegisterProbable //Probable
        winProbable : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[att_rule1, rule1]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
	[att_rule1, rule2]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
	[att_rule1, rule3]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
        [att_rule1, rule4]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
	[att_rule1, rule5]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
        [att_rule1, rule6]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 

	[att_rule2, rule1]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
	[att_rule2, rule2]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
	[att_rule2, rule3]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
        [att_rule2, rule4]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
	[att_rule2, rule5]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
        [att_rule2, rule6]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 

	[att_rule3, rule1]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
	[att_rule3, rule2]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
	[att_rule3, rule3]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
        [att_rule3, rule4]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ;  
	[att_rule3, rule5]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ; 
        [att_rule3, rule6]   true -> 0.25:(winProbable'=1)+ 0.75:(winProbable'=0) ;  
endmodule


module RegisterAlmostCertain //Almost certain
        winAlmostCertain  : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[att_rule1, rule1]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
	[att_rule1, rule2]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
	[att_rule1, rule3]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
        [att_rule1, rule4]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
	[att_rule1, rule5]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
        [att_rule1, rule6]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 

	[att_rule2, rule1]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
	[att_rule2, rule2]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
	[att_rule2, rule3]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
        [att_rule2, rule4]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
	[att_rule2, rule5]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
        [att_rule2, rule6]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ;  

	[att_rule3, rule1]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
	[att_rule3, rule2]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
	[att_rule3, rule3]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
        [att_rule3, rule4]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ;  
	[att_rule3, rule5]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ; 
        [att_rule3, rule6]   true -> 0.07:(winAlmostCertain'=1)+ 0.93:(winAlmostCertain'=0) ;  
endmodule

module RegisterCertain //Almost certain
        winCertain  : [-1..1] init -1 ;
	//1 for successful interventions
	//0 for non successful interventions
	[att_rule1, rule1]   true -> (winCertain'=1) ; 
	[att_rule1, rule2]   true -> (winCertain'=1) ; 
	[att_rule1, rule3]   true -> (winCertain'=1) ; 
        [att_rule1, rule4]   true -> (winCertain'=1) ; 
	[att_rule1, rule5]   true -> (winCertain'=1) ; 
        [att_rule1, rule6]   true -> (winCertain'=1) ; 

	[att_rule2, rule1]   true -> (winCertain'=1) ; 
	[att_rule2, rule2]   true -> (winCertain'=1) ; 
	[att_rule2, rule3]   true -> (winCertain'=1) ; 
        [att_rule2, rule4]   true -> (winCertain'=1) ; 
	[att_rule2, rule5]   true -> (winCertain'=1) ; 
        [att_rule2, rule6]   true -> (winCertain'=1) ; 

	[att_rule3, rule1]   true -> (winCertain'=1) ; 
	[att_rule3, rule2]   true -> (winCertain'=1) ; 
	[att_rule3, rule3]   true -> (winCertain'=1) ; 
        [att_rule3, rule4]   true -> (winCertain'=1) ;   
	[att_rule3, rule5]   true -> (winCertain'=1) ; 
        [att_rule3, rule6]   true -> (winCertain'=1) ;  
endmodule


// reward structure for player Human
rewards "utility1"
	win=0 | winProbablyNot=0 | winChancesAboutEven=0 | winProbable=0 | winCertain=0 | winAlmostCertain=0:  cost;// Attacks and successful interventions
	win=1 | winProbablyNot=1 | winChancesAboutEven=1 | winProbable=1 | winCertain=1 | winAlmostCertain=1: -cost;// Attacks and non successful interventions
endrewards


// reward structure for player PDT
rewards "utility2"
	win=1 | winProbablyNot=1 | winChancesAboutEven=1 | winProbable=1 | winCertain=1 | winAlmostCertain=1:  cost; //Attacks and non successful interventions
	win=0 | winProbablyNot=0 | winChancesAboutEven=0 | winProbable=0 | winCertain=0 | winAlmostCertain=0: -cost;// Attacks and successful interventions
endrewards
