csg
//scisec 2024
//author: Abdelhakim Baouya

player p1  Drone endplayer  
player p2  Crane_1 endplayer 
player p3  Crane_2 endplayer 
player p4  Attack_1 endplayer 


const double FREQ;
const int LIFT =1;
const int TAMPER =-1;
const int EMPTY =0;

const double cost; //The cost of winning

const k; // number of rounds

// module to count the rounds
module rounds

	rounds : [0..k+1];
	
	[] rounds<=k -> (rounds'=rounds+1);
	[] rounds=k+1 -> true;

endmodule

module Drone
Drone_Lift : [-1..1] init LIFT ;

[idleDrone]  true -> true;
[writeDrone] true -> true;
[readDrone]  true -> true;

endmodule



//register
module ConnectorDroneCrane_1 

data_1 : [-1..1] init -1;
[idleDrone,idleCrane_1,idleCrane_2,idleAttack_1]   true -> true; 
[idleDrone , idleCrane_1, idleCrane_2, writeCrane_1]   true -> (data_1'=Attack_1_Lift); 


[idleDrone , idleCrane_1, writeCrane_2 ,idleAttack_1]   true -> true; 
[idleDrone , idleCrane_1, writeCrane_2 ,writeCrane_1]   true -> true; 

[idleDrone , idleCrane_1, readCrane_2 ,idleAttack_1]   true -> true; 
[idleDrone , idleCrane_1, readCrane_2 ,writeCrane_1]   true -> true;  


[idleDrone , writeCrane_1, idleCrane_2 ,idleAttack_1]   true -> true; 
[idleDrone , writeCrane_1, idleCrane_2 ,writeCrane_1]   true -> true; 


[idleDrone , writeCrane_1, writeCrane_2 ,idleAttack_1]   true -> true; 
[idleDrone , writeCrane_1, writeCrane_2 ,writeCrane_1]   true -> true;  

[idleDrone , writeCrane_1, readCrane_2  ,idleAttack_1]   true -> true; 
[idleDrone , writeCrane_1, readCrane_2  ,writeCrane_1]   true -> true; 

 
[idleDrone , readCrane_1 , idleCrane_2  ,idleAttack_1]   true -> true; 
[idleDrone , readCrane_1 , idleCrane_2  ,writeCrane_1]   true -> true;   


[idleDrone , readCrane_1 , writeCrane_2 ,idleAttack_1]   true -> true; 
[idleDrone , readCrane_1 , writeCrane_2 ,writeCrane_1]   true -> true; 


[idleDrone , readCrane_1 , readCrane_2 ,idleAttack_1]   true -> true; 
[idleDrone , readCrane_1 , readCrane_2 ,writeCrane_1]   true -> true; 

[writeDrone, idleCrane_1 , idleCrane_2 ,idleAttack_1]   true  -> (data_1'=Drone_Lift); 
[writeDrone, idleCrane_1 , idleCrane_2 ,writeCrane_1]   true  -> (1-FREQ):(data_1'=Drone_Lift)+(FREQ):(data_1'=Attack_1_Lift); 

[writeDrone, idleCrane_1 , writeCrane_2 ,idleAttack_1]    true -> true;
[writeDrone, idleCrane_1 , writeCrane_2 ,writeCrane_1]  true -> true; 

[writeDrone, idleCrane_1 , readCrane_2 ,idleAttack_1]  true  -> true; 
[writeDrone, idleCrane_1 , readCrane_2 ,writeCrane_1]    true  -> true; 

[writeDrone, writeCrane_1, idleCrane_2  ,idleAttack_1]    true -> true; 
[writeDrone, writeCrane_1, idleCrane_2  ,writeCrane_1]  true -> true; 

[writeDrone, writeCrane_1, writeCrane_2  ,idleAttack_1]    true -> true;  
[writeDrone, writeCrane_1, writeCrane_2  ,writeCrane_1]  true -> true; 

[writeDrone, writeCrane_1, readCrane_2  ,idleAttack_1]    true -> true; 
[writeDrone, writeCrane_1, readCrane_2  ,writeCrane_1]  true -> true; 


[writeDrone, readCrane_1 , idleCrane_2 ,idleAttack_1]    true -> true; 
[writeDrone, readCrane_1 , idleCrane_2 ,writeCrane_1]  true -> true; 

[writeDrone, readCrane_1 , writeCrane_2 ,idleAttack_1]    true -> true;  
[writeDrone, readCrane_1 , writeCrane_2 ,writeCrane_1]  true -> true;

[writeDrone, readCrane_1 , readCrane_2 ,idleAttack_1]    true -> true;  
[writeDrone, readCrane_1 , readCrane_2  ,writeCrane_1]  true -> true;

[readDrone , readCrane_1 , idleCrane_2 ,idleAttack_1]    true -> true;  
[readDrone , readCrane_1 , idleCrane_2  ,writeCrane_1]  true -> true;

[readDrone , readCrane_1 , writeCrane_2 ,idleAttack_1]    true -> true; 
[readDrone , readCrane_1 , writeCrane_2 ,writeCrane_1]  true -> true;

[readDrone , readCrane_1 , readCrane_2  ,idleAttack_1]    true -> true; 
[readDrone , readCrane_1 , readCrane_2  ,writeCrane_1]  true -> true; 

[readDrone , idleCrane_1 , idleCrane_2  ,idleAttack_1]    true -> true; 
[readDrone , idleCrane_1 , writeCrane_2 ,writeCrane_1]  true -> true;

[readDrone , writeCrane_1, idleCrane_2  ,idleAttack_1]    true -> true; 
[readDrone , writeCrane_1, idleCrane_2  ,writeCrane_1]  true -> true; 

[readDrone , writeCrane_1, writeCrane_2 ,idleAttack_1]    true -> true; 
[readDrone , writeCrane_1, writeCrane_2 ,writeCrane_1]  true -> true;

[readDrone , writeCrane_1, readCrane_2  ,idleAttack_1]    true -> true; 
[readDrone , writeCrane_1, readCrane_2  ,writeCrane_1]  true -> true;

endmodule

module Crane_1
Crane_1_Lift : [-1..1] init EMPTY ;

[idleCrane_1]  true -> true;
[writeCrane_1] true -> true;
[readCrane_1]  true -> (Crane_1_Lift'=data_1);

endmodule


module Crane_2
Crane_2_Lift : [-1..1] init EMPTY ;

[idleCrane_2]  true -> true;
[writeCrane_2] true -> true;
[readCrane_2]  true -> (Crane_2_Lift'=data_1);

endmodule

module Attack_1

Attack_1_Lift : [-1..1] init TAMPER ;

[idleAttack_1]  true -> true;
[writeAttack_1] true -> true;

endmodule

